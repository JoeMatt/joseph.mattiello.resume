name: Create Release and Upload Build

on:
  push:
    branches:
      - master # Or 'main' if that's your primary branch name

jobs:
  build:
    name: Build macOS Universal Application and Generate PDF
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Define Swift Toolchain Variables
        id: swift_vars
        run: |
          SWIFT_PKG_URL="https://download.swift.org/swift-6.1-release/xcode/swift-6.1-RELEASE/swift-6.1-RELEASE-osx.pkg"
          SWIFT_PKG_FILENAME=$(basename "${SWIFT_PKG_URL}")
          echo "SWIFT_PKG_FILENAME=${SWIFT_PKG_FILENAME}" >> "$GITHUB_OUTPUT"

          PKG_BASENAME_FOR_TOOLCHAIN=$(basename "${SWIFT_PKG_FILENAME}" .pkg)
          TOOLCHAIN_DIR_BASENAME=${PKG_BASENAME_FOR_TOOLCHAIN%-osx} # Should handle if -osx is not present
          TOOLCHAIN_NAME="${TOOLCHAIN_DIR_BASENAME}.xctoolchain"
          TOOLCHAIN_PATH="/Library/Developer/Toolchains/${TOOLCHAIN_NAME}"
          echo "TOOLCHAIN_PATH=${TOOLCHAIN_PATH}" >> "$GITHUB_OUTPUT"
          echo "TOOLCHAIN_BIN_PATH=${TOOLCHAIN_PATH}/usr/bin" >> "$GITHUB_OUTPUT"

          # Use a unique part of the URL for the cache key
          CACHE_IDENTIFIER="swift-6-1-release"
          echo "CACHE_KEY_PKG=swift-pkg-${CACHE_IDENTIFIER}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Cache Swift PKG
        id: cache_swift_pkg
        uses: actions/cache@v4
        with:
          path: ./${{ steps.swift_vars.outputs.SWIFT_PKG_FILENAME }} # Cache the pkg file in the workspace
          key: ${{ runner.os }}-${{ steps.swift_vars.outputs.CACHE_KEY_PKG }}

      - name: Download Swift PKG (if not cached)
        if: steps.cache_swift_pkg.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss for Swift PKG. Downloading from ${{ env.SWIFT_PKG_URL }}..."
          curl -fsSL -o "${{ steps.swift_vars.outputs.SWIFT_PKG_FILENAME }}" "${{ env.SWIFT_PKG_URL }}"
        env:
          SWIFT_PKG_URL: "https://download.swift.org/swift-6.1-release/xcode/swift-6.1-RELEASE/swift-6.1-RELEASE-osx.pkg"
        shell: bash

      - name: Install Swift & Verify
        run: |
          echo "Installing from package: ${{ steps.swift_vars.outputs.SWIFT_PKG_FILENAME }}"
          sudo installer -pkg "${{ steps.swift_vars.outputs.SWIFT_PKG_FILENAME }}" -target /

          TOOLCHAIN_PATH="${{ steps.swift_vars.outputs.TOOLCHAIN_PATH }}"
          TOOLCHAIN_BIN_PATH="${{ steps.swift_vars.outputs.TOOLCHAIN_BIN_PATH }}"

          echo "Swift toolchains available after install:"
          ls -lah /Library/Developer/Toolchains/

          echo "Inspecting contents of selected toolchain directory: ${TOOLCHAIN_PATH}"
          sudo ls -lR "${TOOLCHAIN_PATH}" > toolchain_contents.txt || echo "Toolchain directory listing failed"

          echo "Verifying Swift version directly from toolchain path: ${TOOLCHAIN_BIN_PATH}/swift"
          "${TOOLCHAIN_BIN_PATH}/swift" --version
        shell: bash

      - name: Add Swift to PATH for subsequent steps
        run: |
          echo "Adding ${{ steps.swift_vars.outputs.TOOLCHAIN_BIN_PATH }} to GITHUB_PATH"
          echo "${{ steps.swift_vars.outputs.TOOLCHAIN_BIN_PATH }}" >> "$GITHUB_PATH"
        shell: bash

      - name: Install ncurses for TUI support
        run: brew install ncurses
        shell: bash

      - name: Build Universal Swift application
        env:
          TOOLCHAIN_PATH_ENV: ${{ steps.swift_vars.outputs.TOOLCHAIN_PATH }} # Pass toolchain path as env for clarity
        run: |
          echo "PATH is: $PATH"
          echo "which swift (should be from our toolchain): $(which swift)"
          echo "Swift version for build (should be 6.1): $(swift --version)"

          # Explicitly set toolchain for the build process
          export TOOLCHAINS=$(basename "$TOOLCHAIN_PATH_ENV" .xctoolchain)
          # DO NOT set DEVELOPER_DIR to the toolchain path, as it breaks xcrun

          echo "TOOLCHAINS set to: $TOOLCHAINS"
          echo "Current DEVELOPER_DIR (should be system default Xcode): $(xcode-select -p)"

          # Verify swift location and version again after setting critical env vars
          echo "which swift (after env vars): $(which swift)"
          echo "Swift version (after env vars): $(swift --version)"

          echo "Listing project root contents:"
          ls -lav
          echo "Listing Resources directory contents:"
          ls -lav Resources/
          echo "Listing Sources/joseph.mattiello.resume contents:"
          ls -lav Sources/joseph.mattiello.resume/

          echo "Attempting verbose build..."
          # Clean previous build artifacts
          swift package clean
          rm -rf .build # Ensure .build is completely gone

          # Get SDK path
          SDK_PATH=$(xcrun --sdk macosx --show-sdk-path)
          echo "Using SDK Path: $SDK_PATH"

          # Explicitly set the Swift language version for the build system
          export SWIFT_VERSION=6.0
          echo "SWIFT_VERSION explicitly set to: $SWIFT_VERSION"

          swift build -c release --product joseph.mattiello.resume --arch arm64 --sdk "$SDK_PATH"

      - name: Prepare Swift App Artifact
        id: prepare_artifact
        if: success()
        run: |
          EXECUTABLE_NAME="joseph.mattiello.resume"
          # Swift build --arch arm64 places output in .build/arm64-apple-macosx/release/
          EXECUTABLE_DIR=".build/arm64-apple-macosx/release"
          EXECUTABLE_PATH="${EXECUTABLE_DIR}/${EXECUTABLE_NAME}"
          
          echo "Expected executable path: ${EXECUTABLE_PATH}"
          if [ ! -f "${EXECUTABLE_PATH}" ]; then
            echo "Error: Executable not found at ${EXECUTABLE_PATH}"
            echo "Listing contents of .build directory:"
            ls -lR .build
            exit 1
          fi
          
          ARCHIVE_NAME="${EXECUTABLE_NAME}-macos-arm64.tar.gz"
          # cd to the directory containing the executable
          cd "${EXECUTABLE_DIR}"
          
          echo "Copying Resources/resume.yaml into staging directory..."
          cp "${{ github.workspace }}/Resources/resume.yaml" ./resume.yaml

          echo "Current directory: $(pwd)"
          echo "Contents of current directory (after copying resume.yaml):"
          ls -la
          
          echo "Creating archive ${ARCHIVE_NAME}..."
          tar -czvf "${ARCHIVE_NAME}" "${EXECUTABLE_NAME}" resume.yaml
          
          # Move archive to a consistent location for uploading
          mkdir -p "${{ github.workspace }}/artifacts"
          mv "${ARCHIVE_NAME}" "${{ github.workspace }}/artifacts/"
          echo "Archive moved to ${{ github.workspace }}/artifacts/${ARCHIVE_NAME}"
          echo "archive_path=${{ github.workspace }}/artifacts/${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          echo "swift_artifact_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Swift App build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_artifact.outputs.swift_artifact_name }}
          path: ${{ steps.prepare_artifact.outputs.archive_path }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          echo "Installing WeasyPrint system dependencies via Homebrew..."
          brew install pango cairo gdk-pixbuf glib libffi

          echo "Setting environment variables for Homebrew libraries to build Python packages..."
          export LDFLAGS="-L/opt/homebrew/lib -L/opt/homebrew/opt/libffi/lib"
          export CPPFLAGS="-I/opt/homebrew/include -I/opt/homebrew/opt/libffi/include"
          export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:/opt/homebrew/opt/libffi/lib/pkgconfig:$PKG_CONFIG_PATH"
          # Determine GLIB_CELLAR_PATH dynamically if possible, or use a common pattern
          # For now, we rely on /opt/homebrew/lib which should contain the symlinks.
          EFFECTIVE_DYLD_PATH="/opt/homebrew/lib"
          # If glib is installed, its opt path should give us its lib dir
          if [ -d "/opt/homebrew/opt/glib/lib" ]; then
             EFFECTIVE_DYLD_PATH="/opt/homebrew/opt/glib/lib:${EFFECTIVE_DYLD_PATH}"
          fi
          echo "DYLD_LIBRARY_PATH=${EFFECTIVE_DYLD_PATH}:${DYLD_LIBRARY_PATH}" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH will be set to: ${EFFECTIVE_DYLD_PATH}:${DYLD_LIBRARY_PATH}"

          python -m pip install --upgrade pip
          echo "Installing Python requirements (no cache)..."
          pip install --no-cache-dir -r requirements.txt

      - name: Generate PDF resume
        id: pdf_generation
        run: |
          echo "Verifying Homebrew GObject library presence..."
          ls -l /opt/homebrew/lib/libgobject-2.0.dylib /opt/homebrew/lib/libgobject-2.0.0.dylib
          ls -l /opt/homebrew/opt/glib/lib/libgobject-2.0.dylib /opt/homebrew/opt/glib/lib/libgobject-2.0.0.dylib || echo "Direct glib path for libgobject not found, this might be okay."

          echo "Current DYLD_LIBRARY_PATH from GITHUB_ENV: $DYLD_LIBRARY_PATH"
          echo "Running PDF generation script..."
          # Python will inherit DYLD_LIBRARY_PATH from the environment
          python generate_html_resume.py
          
          # Check if resume.pdf was created
          if [ ! -f output/resume.pdf ]; then
            echo "Error: resume.pdf not found in output directory"
            exit 1
          fi

      - name: Prepare PDF Artifact
        id: pdf_artifact_prep
        run: |
          PDF_PATH="output/resume.pdf"
          PDF_ARTIFACT_NAME="resume.pdf"
          echo "pdf_path=${PDF_PATH}" >> $GITHUB_OUTPUT
          echo "pdf_artifact_name=${PDF_ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pdf_artifact_prep.outputs.pdf_artifact_name }} # This will be 'resume.pdf'
          path: ${{ steps.pdf_artifact_prep.outputs.pdf_path }} # This will be 'output/resume.pdf'

  create_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version and bump patch
        id: versioning
        run: |
          git fetch --tags --force
          LATEST_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="v0.1.0"
          else
            VERSION_STRING=${LATEST_TAG#v}
            MAJOR=$(echo $VERSION_STRING | cut -d. -f1)
            MINOR=$(echo $VERSION_STRING | cut -d. -f2)
            PATCH=$(echo $VERSION_STRING | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT
          echo "Generated new tag: ${NEW_TAG}"

      - name: Create new Git Tag
        run: |
          git config user.name "GitHub Action Release Bot"
          git config user.email "actions@github.com"
          git tag ${{ steps.versioning.outputs.new_tag }} -m "Release ${{ steps.versioning.outputs.new_tag }}"
          git push origin ${{ steps.versioning.outputs.new_tag }}

      - name: Download Swift App artifact
        uses: actions/download-artifact@v4
        with:
          name: joseph.mattiello.resume-macos-arm64.tar.gz
          # Artifact will be downloaded to the root of the workspace

      - name: Download PDF artifact
        uses: actions/download-artifact@v4
        with:
          name: resume.pdf # Matches the 'name' used in upload-artifact for PDF
          # Artifact will be downloaded to the root of the workspace

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          name: Release ${{ steps.versioning.outputs.new_tag }}
          body: |
            Automated release for version ${{ steps.versioning.outputs.new_tag }}.
            Contains macOS Universal (arm64 + x86_64) executable and PDF resume.
          draft: false
          prerelease: false
          files: |
            joseph.mattiello.resume-macos-arm64.tar.gz
            resume.pdf
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
